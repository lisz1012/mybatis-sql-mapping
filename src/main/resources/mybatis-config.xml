<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 在填写标签的时候一定注意其顺序 -->
<configuration>
    <!-- 当需要引入外部文件的时候可以使用这样的方式，类似于：
     <context:property-placeholder location />
     resource: 表示从当前项目的类路径中加载，如果用的是Idea，则是resources资源目录下的文件
     url: 当前文件系统或者网络上的资源
     -->
    <properties resource="db.properties" />
    <!-- 可以一项mybatis运行时的行为，包含N多个属性，需要什么引入什么 -->
    <settings>
        <!-- 开启驼峰标识的自动转换 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
    <!-- 在引入实体类的名称的时候，可以使用别名，而不需要写完全限定名 -->
    <typeAliases>
        <!-- 在UserMapper.xml中就可以不写全路径，而只写User了
         但是每一个类都需要单独来配置别名，类多了以后就不好办了-->
<!--        <typeAlias type="com.lisz.bean.User" alias="User" />-->
        <!-- 把包名写好，在XXXMapper.xml中只需要写其下的类名就行了-->
        <package name="com.lisz.bean" />
    </typeAliases>
    <!-- 当需要自定义对象工厂的时候实现此标签，完成结果集到java对象实例化的过程,一般也不用  -->
<!--    <objectFactory type=""></objectFactory>-->
    <!-- Plugin最有用的是PageHelper，可以参见：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md
     而mybatisplus内置了分页插件，不用特别配置-->

    <!-- 设置定义自己的类型转换器，mybatis中默认内置了很多类型处理器，一般不需要自己来实现 -->
<!--    <typeHandlers>-->
<!--        <typeHandler handler=""></typeHandler>-->
<!--        <package name=""/>-->
<!--    </typeHandlers>-->
    <!-- 项目开发过程中，有开发、测试、生产等环境。在这里可以指定多个环境。default可以选择哪个环境作为运行时环境 -->
    <environments default="development">
        <!-- 配置具体的环境属性，id表示当前环境的名称 -->
        <environment id="development">
            <!-- 事务管理器，每一种数据源都要配置自己的事务管理器
            type表示事务管理器的类型
            jdbc：使用JDBC原声的事务控制
            managed：什么都不做-->
            <transactionManager type="JDBC"/>
            <!-- 具体的数据源的类型。type表示其类型。POOLED表示使用数据库连接处
             UNPOOLED：每次都打开关闭连接-->
            <dataSource type="POOLED">
                <!-- 联机数据库的时候要添加的必备的参数，一般是这四个，如果是连接池的话，可以设置连接连接最大个数的相关信息 -->
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <!-- 提供了不同的数据库厂商的标识，当有数据库移植的需求的时候，可以根据不同的数据库来执行不同的SQL，
    用来扩展数据库的移植性。设置能提供多少个数据库的支持 -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="SQL Server" value="sqlserver"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>
    <!-- 用来讲Mapper映射文件引入到配置文件中，方便程序启动的时候进行加载
     每次在填写的时候要注意，写完xml映射之后，一定要要在这里添加新mapper
     resource：从项目的类路径下加载对应的映射文件
     url：从本地磁盘目录或者网络中引入映射文件（几乎不用）
     class：可以直接引入类的完全限定名，可以使用注解的方式进行使用
     如果不想以注解的方式引入呢？如果想要以class的方式引入配置文件，可以讲xml文件放到具体类的同目录下.
      1、      如果是maven的项目的话，需要添加如下配置，因为maven默认只会编译java文件，需要把xml文件也添加到指定目录中
                    <build>
                        <resources>
                            <resource>
                                <directory>src/main/java</directory>
                                <includes>
                                    <include>**/*.xml</include>
                                </includes>
                            </resource>
                        </resources>
                    </build>
     2、在resource资源目录下，创建跟dao层一样的同级目录即可，将配置文件放到指定的目录
     gradle怎么搞，存疑🤨？？？-->
    <mappers>
        <mapper resource="UserMapper.xml"/>
<!--        <mapper class="com.lisz.dao.UserDaoAnnotation" />-->
<!--        <mapper class="com.lisz.dao.UserDao" />-->
        <mapper resource="DogMapper.xml"/>
        <!--如果需要引入多个配置文件，可以直接定义包的名称
        resource目录下配置的映射文件必须要具体相同的目录.
        gradle还不知道怎么整。。。
        -->
<!--        <package name="com.lisz.dao"/>-->
    </mappers>
</configuration>