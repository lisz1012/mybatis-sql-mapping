<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--在使用mybatis的时候，有些情况下需要我们封装结果集，一般情况下mybatis会帮我们自动封装（字段名跟属性值必须一一对应），但是如果字段的值和类中的值
    不匹配的时候，怎么处理？
        1、可以在sql语句中添加别名字段，来保证赋值成功，但是太麻烦了，而且不可重用
        2、resultMap：
    -->
<mapper namespace="com.lisz.dao.DogDao">
    <!-- 设置第三方缓存，Ehcache，见：https://mybatis.org/ehcache-cache/ -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
    <!--自定义结果集
    id:表示当前结果集的唯一标识
    type:表示当前结果集的类型
    -->
    <resultMap id="myDog" type="com.lisz.bean.Dog">
        <!--
       id:表示指定对应的主键。主键最好跟业务无关，就是一个独立的值，自然主键和代理主键，推荐使用代理主键
          这样的好处是：避免业务耦合。MySQL集群的话是不能使用使用自增的id的，要用雪花算法生成id
       property:实体类中对应的属性值
       column：表中字段的名称
       -->
        <id property="id" column="id" /><!--主键的property和column是一样的，所以可以不写，但是最好写上-->
        <!--除主键外的其他字段映射-->
        <result property="name" column="dname" />
        <result property="gender" column="dgender" />
        <result property="age" column="dage" />
        <association property="user" javaType="User" > <!-- column="user_id" 和 select="findById" 可以不写 -->
            <id property="id" column="id" />
            <result property="name" column="name" />
            <result property="job" column="job" />
            <result property="birthDate" column="birth_date" />
            <result property="profile" column="profile" />
            <result property="email" column="email" />
            <result property="score" column="score" />
            <result property="createdAt" column="created_at" />
            <result property="modifiedAt" column="modified_at" />
            <result property="version" column="version" />
        </association>
    </resultMap>
    <!--还可以把各层级压扁。将每一个属性值都映射成对象中的数据，如果有实体类对象，就写成对象.属性的方式。但是不太专业-->
    <!--    <resultMap id="myEmp" type="com.mashibing.bean.Emp">-->
    <!--        <id column="empno" property="empno"></id>-->
    <!--        <result column="ename" property="ename"></result>-->
    <!--        <result column="job" property="job"></result>-->
    <!--        <result column="mgr" property="mgr"></result>-->
    <!--        <result column="hiredate" property="hiredate"></result>-->
    <!--        <result column="sal" property="sal"></result>-->
    <!--        <result column="comm" property="comm"></result>-->
    <!--        <result column="deptno" property="dept.deptno"></result>-->
    <!--        <result column="dname" property="dept.dname"></result>-->
    <!--        <result column="loc" property="dept.loc"></result>-->
    <!--    </resultMap>-->

    <select id="findById" resultMap="myDog">
      select dog.id,
             dog.dname,
             dog.dgender,
             dog.dage,
             user.id,
             user.name,
             user.job,
             user.birth_date,
             user.profile,
             user.email,
             user.score,
             user.created_at,
             user.modified_at,
             user.version
             from dog left join user on dog.user_id = user.id where dog.id = #{id}
    </select>

    <select id="findByIdTwoSteps" resultMap="twoStepSelectById">
        select * from dog where id = #{id}
    </select>
    <resultMap id="twoStepSelectById" type="com.lisz.bean.Dog">
        <id property="id" column="id" /><!--主键的property和column是一样的，所以可以不写，但是最好写上-->
        <!--除主键外的其他字段映射-->
        <result property="name" column="dname" />
        <result property="gender" column="dgender" />
        <result property="age" column="dage" />
        <association property="user" select="com.lisz.dao.UserDao.findUserById" column="id"> <!-- column="user_id" 和 select="findById" 可以不写 -->

        </association>
    </resultMap>



    <resultMap id="myDog2" type="com.lisz.bean.Dog">
        <!--
       id:表示指定对应的主键。主键最好跟业务无关，就是一个独立的值，自然主键和代理主键，推荐使用代理主键
          这样的好处是：避免业务耦合。MySQL集群的话是不能使用使用自增的id的，要用雪花算法生成id
       property:实体类中对应的属性值
       column：表中字段的名称
       -->
        <id property="id" column="id" /><!--主键的property和column是一样的，所以可以不写，但是最好写上-->
        <!--除主键外的其他字段映射-->
        <result property="name" column="dname" />
        <result property="gender" column="dgender" />
        <result property="age" column="dage" />
    </resultMap>
    <select id="findDogsByUserId" resultMap="myDog2">
        select * from dog where user_id = #{user_id}
    </select>


    <!--========================= 动态SQL ==========================================-->
    <!--
    foreach:遍历集合中的元素
        collection:指定要遍历的集合
        separator:分隔符
        open:以什么开始
        close：以什么结束
        item:遍历过程中的每一个元素值
        index:表示索引
    -->
    <select id="findDogsByUserIds" resultMap="myDog">
        select * from dog where user_id in
        <foreach collection="user_ids" separator="," open="(" item="id" index="index" close=")"> <!-- user_ids跟@Param的参数一致 -->
            #{id} <!-- 这个id指的是上一行的id -->
        </foreach>
    </select>



    <!--========================= 缓存 ==========================================-->
    <cache></cache>
    <!--
    mybatis中的缓存机制：
        如果没有缓存，那么每次查询的时候都需要从数据库中加载数据，这回造成io的性能问题，所以，在很多情况下
        如果连续执行两条相同的sql语句，可以直接从缓存中获取，如果获取不到，那么再去查询数据库，这意味着查询完成的结果
        需要放到缓存中。
        缓存分类：
            1、一级缓存：表示sqlSession级别的缓存，每次查询的时候会开启一个会话，此会话相当于一次连接，关闭之后自动失效
            2、二级缓存：全局范围内的缓存，sqlsession关闭之后才会生效
            3、第三方缓存：集成第三方的组件，来充当缓存的作用
        ==================
        一级缓存：表示将数据存储在sqlsession中，关闭之后自动失效，默认情况下是开启的
            在同一个会话之内，如果执行了多个相同的sql语句，那么除了第一个之外，所有的数据都是从缓存中进行查询的
            在某些情况下，一级缓存可能会失效？
                1、在同一个方法中，可能会开启多个会话，此时需要注意，会话跟方法没有关系，不是一个方法就只能由一个会话，所以严格
                    记住,缓存的数据是保存在sqlsession中的
                2、当传递对象的时候，如果对象中的属性值不同，也不会走缓存
                3、在多次查询过程中，如果修改了数据，那么缓存会失效
                4、如果在一个会话过程中，手动清空了缓存，那么缓存也会失效
        二级缓存：表示的是全局缓存，必须要等到sqlsession关闭之后才会生效
            默认是不开启的，如果需要开启的话，需要进行如下设置
                1、修改全局配置文件，在settings中添加配置
                    <setting name="cacheEnabled" value="true"/>
                2、指定在哪个映射文件中使用缓存的配置
                    <cache></cache>
                3、对应的java实体类必须要实现序列化的接口
                在使用二级缓存的时候，可以包含多个属性值：
                eviction：缓存淘汰机制：
                        LRU： 最近最少使用
                        FIFO:先进先出，按照添加缓存的顺序执行
                        SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
                        WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。
                flushInterval：设置多长时间进行缓存刷新
                size:引用的条数，是一个正整数，缓存中可以存储多少个对象，一般不设置，如果设置的话不要太大，会导致内存溢出
                readonly:只读属性：
                        true:只读缓存，会给所有的调用的方法返回该对象的实例，不安全，可能对对象进行修改
                        false:读写缓存，只是返回缓存对象的拷贝，比较安全，默认，推荐（效率比true略低）。
                一级缓存跟二级缓存有没有可能同时存在数据？
                        不会同时存在，因为二级缓存生效的时候，是在sqlsession关闭的时候
                当查询数据的时候，我们是先查询一级缓存还是先查询二级缓存？
                        先查询二级缓存，然后再查询一级缓存
    -->
    <update id="updateWithDog">
        update dog set dage = #{age} where id = #{id}
    </update>
</mapper>